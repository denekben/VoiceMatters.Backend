// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VoiceMatters.Infrastructure.Data;

#nullable disable

namespace VoiceMatters.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("VoiceMatters")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VoiceMatters.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUuid")
                        .HasColumnType("text");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Sex")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", "VoiceMatters");
                });

            modelBuilder.Entity("VoiceMatters.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PetitionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PetitionId");

                    b.ToTable("Images", "VoiceMatters");
                });

            modelBuilder.Entity("VoiceMatters.Domain.Entities.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PetitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PetitionId")
                        .IsUnique();

                    b.ToTable("News", "VoiceMatters");
                });

            modelBuilder.Entity("VoiceMatters.Domain.Entities.Petition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<long>("SignQuantity")
                        .HasColumnType("bigint");

                    b.Property<long>("SignQuantityPerDay")
                        .HasColumnType("bigint");

                    b.Property<string>("TextPayload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Petitions", "VoiceMatters");
                });

            modelBuilder.Entity("VoiceMatters.Domain.Entities.Pivots.AppUserSignedPetition", b =>
                {
                    b.Property<Guid>("PetitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SignerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SignedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("PetitionId", "SignerId");

                    b.HasIndex("SignerId");

                    b.ToTable("AppUserSignedPetitions", "VoiceMatters");
                });

            modelBuilder.Entity("VoiceMatters.Domain.Entities.Pivots.PetitionTag", b =>
                {
                    b.Property<Guid>("PetitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("PetitionId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags", "VoiceMatters");
                });

            modelBuilder.Entity("VoiceMatters.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles", "VoiceMatters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d63d2e2c-e6c8-4291-9c9b-5ab4fc73c1ef"),
                            CreatedDate = new DateTime(2025, 3, 12, 22, 29, 38, 623, DateTimeKind.Utc).AddTicks(5957),
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("f2061a04-1a78-476e-bc1a-fc317fa5aeab"),
                            CreatedDate = new DateTime(2025, 3, 12, 22, 29, 38, 623, DateTimeKind.Utc).AddTicks(6879),
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("VoiceMatters.Domain.Entities.Statistic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("PetitionQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("SignsQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("UserQuantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Statistics", "VoiceMatters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e298cdc-a737-42b2-98b3-daf1527539b1"),
                            PetitionQuantity = 0,
                            SignsQuantity = 0,
                            UserQuantity = 0
                        });
                });

            modelBuilder.Entity("VoiceMatters.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PetitionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PetitionId");

                    b.ToTable("Tags", "VoiceMatters");
                });

            modelBuilder.Entity("VoiceMatters.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("VoiceMatters.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("VoiceMatters.Domain.Entities.Image", b =>
                {
                    b.HasOne("VoiceMatters.Domain.Entities.Petition", "Petition")
                        .WithMany("Images")
                        .HasForeignKey("PetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Petition");
                });

            modelBuilder.Entity("VoiceMatters.Domain.Entities.News", b =>
                {
                    b.HasOne("VoiceMatters.Domain.Entities.Petition", "Petition")
                        .WithOne("News")
                        .HasForeignKey("VoiceMatters.Domain.Entities.News", "PetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Petition");
                });

            modelBuilder.Entity("VoiceMatters.Domain.Entities.Petition", b =>
                {
                    b.HasOne("VoiceMatters.Domain.Entities.AppUser", "Creator")
                        .WithMany("PetitionsCreatedByUser")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("VoiceMatters.Domain.Entities.Pivots.AppUserSignedPetition", b =>
                {
                    b.HasOne("VoiceMatters.Domain.Entities.Petition", "Petition")
                        .WithMany("SignedUsers")
                        .HasForeignKey("PetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoiceMatters.Domain.Entities.AppUser", "Signer")
                        .WithMany("PetitionsSignedByUser")
                        .HasForeignKey("SignerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Petition");

                    b.Navigation("Signer");
                });

            modelBuilder.Entity("VoiceMatters.Domain.Entities.Pivots.PetitionTag", b =>
                {
                    b.HasOne("VoiceMatters.Domain.Entities.Petition", "Petition")
                        .WithMany("PetitionTags")
                        .HasForeignKey("PetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoiceMatters.Domain.Entities.Tag", "Tag")
                        .WithMany("Petitions")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Petition");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("VoiceMatters.Domain.Entities.Tag", b =>
                {
                    b.HasOne("VoiceMatters.Domain.Entities.Petition", null)
                        .WithMany("Tags")
                        .HasForeignKey("PetitionId");
                });

            modelBuilder.Entity("VoiceMatters.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("PetitionsCreatedByUser");

                    b.Navigation("PetitionsSignedByUser");
                });

            modelBuilder.Entity("VoiceMatters.Domain.Entities.Petition", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("News");

                    b.Navigation("PetitionTags");

                    b.Navigation("SignedUsers");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("VoiceMatters.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("VoiceMatters.Domain.Entities.Tag", b =>
                {
                    b.Navigation("Petitions");
                });
#pragma warning restore 612, 618
        }
    }
}
